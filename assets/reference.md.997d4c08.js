import{_ as e,c as t,o,a as s}from"./app.3292d580.js";const F=JSON.parse('{"title":"API Reference","description":"","frontmatter":{},"headers":[{"level":2,"title":"Form","slug":"form","link":"#form","children":[{"level":3,"title":"Form Props","slug":"form-props","link":"#form-props","children":[]},{"level":3,"title":"Interface FormInstance","slug":"interface-forminstance","link":"#interface-forminstance","children":[]}]},{"level":2,"title":"Field","slug":"field","link":"#field","children":[{"level":3,"title":"Field Props","slug":"field-props","link":"#field-props","children":[]},{"level":3,"title":"Interface FieldInstance","slug":"interface-fieldinstance","link":"#interface-fieldinstance","children":[]}]},{"level":2,"title":"Array Field","slug":"array-field","link":"#array-field","children":[{"level":3,"title":"Array Field Props","slug":"array-field-props","link":"#array-field-props","children":[]},{"level":3,"title":"Interface FieldArrayInstance","slug":"interface-fieldarrayinstance","link":"#interface-fieldarrayinstance","children":[]}]},{"level":2,"title":"Array Field Item","slug":"array-field-item","link":"#array-field-item","children":[{"level":3,"title":"Array Field Item Props","slug":"array-field-item-props","link":"#array-field-item-props","children":[]}]}],"relativePath":"reference.md"}'),a={name:"reference.md"},n=s(`<h1 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-hidden="true">#</a></h1><p>This is the no-frills versions of the docs. Very little is explained here, but if you&#39;re looking for very-specific usage, this is the place for you.</p><h2 id="form" tabindex="-1">Form <a class="header-anchor" href="#form" aria-hidden="true">#</a></h2><p>The <code>Form</code> component is the main component of this library. It is responsible for managing the state of the form and must be the parent of all <code>Field</code> components.</p><p>An example <code>Form</code> usage is:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Form</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onSubmit</span><span style="color:#89DDFF;">={()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}}&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">{({</span><span style="color:#A6ACCD;font-style:italic;">submit</span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">submit</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">Submit</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Form</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="form-props" tabindex="-1">Form Props <a class="header-anchor" href="#form-props" aria-hidden="true">#</a></h3><p>The <code>Form</code> component takes the following props:</p><table><thead><tr><th>Method</th><th>Parameters</th><th>Expected Return</th><th>Description</th></tr></thead><tbody><tr><td><code>onSubmit</code></td><td><code>Record&lt;string, any&gt;</code>, <a href="#interface-formcontext"><code>FormContext</code></a></td><td></td><td>The function to call when the form is submitted. The first argument is the values of a form submitted. It might look something like:<br><code>{email: &quot;test@example.com&quot;, password: &quot;Hunter2!&quot;, confirmpassword: &quot;Hunter2!&quot;}</code></td></tr><tr><td><code>children</code></td><td><a href="#interface-forminstance"><code>FormInstance</code></a></td><td><code>JSX.Element</code></td><td>This is the component child function to pass, which accepts the arguments for FormInstance.</td></tr></tbody></table><h3 id="interface-forminstance" tabindex="-1"><em>Interface</em> <code>FormInstance</code> <a class="header-anchor" href="#interface-forminstance" aria-hidden="true">#</a></h3><p>These are the properties that are passed to the <code>&lt;Form&gt;</code> component&#39;s child function, the <code>FormContext</code>, and the second arguments of the <code>onSubmit</code> function as well as all <a href="#field"><code>&lt;Field&gt;</code> <code>onXValidate</code> property functions</a>:</p><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>submit</code></td><td><code>() =&gt; void</code></td><td>The function to run when you&#39;re ready to submit your form. This function will not do anything if there are <code>errors</code> on the form.</td></tr><tr><td><code>errors</code></td><td><code>string[]</code></td><td>An array of all errors on all form fields.</td></tr><tr><td><code>isValid</code></td><td><code>boolean</code></td><td>A boolean to check if the form is valid or not.</td></tr><tr><td><code>isSubmitted</code></td><td><code>boolean</code></td><td>A boolean to check if the form has had an attempted submission or not.</td></tr><tr><td><code>setIsSubmitted</code></td><td><code>(val: boolean) =&gt; void</code></td><td>A method to reset the <code>isSubmitted</code> field</td></tr><tr><td><code>isDirty</code></td><td><code>boolean</code></td><td>A boolean to check if any of the form fields are dirty or not.</td></tr><tr><td><code>setIsDirty</code></td><td><code>(val: boolean) =&gt; void</code></td><td>A method to reset the <code>isDirty</code> field</td></tr><tr><td><code>isTouched</code></td><td><code>boolean</code></td><td>A boolean to check if any of the form fields have been touched or not.</td></tr><tr><td><code>setIsTouched</code></td><td><code>(val: boolean) =&gt; void</code></td><td>A method to reset the <code>isTouched</code> field</td></tr><tr><td><code>getFieldValue</code></td><td><code>(fieldName: sting) =&gt; FieldInstance</code></td><td>Takes the field name and returns a <a href="#interface-fieldinstance"><code>FieldInstance</code></a> or <a href="#interface-fieldarrayinstance"><code>FieldArrayInstance</code></a> representation of the named field.</td></tr></tbody></table><h2 id="field" tabindex="-1">Field <a class="header-anchor" href="#field" aria-hidden="true">#</a></h2><p>A field is the primitive for every input that you&#39;d like to display to the user. This is what an example <code>Field</code> looks like:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Field</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt; </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">username</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">initialValue</span><span style="color:#89DDFF;">={</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{({</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">setValue</span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">value</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">} </span><span style="color:#C792EA;">onChange</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setValue</span><span style="color:#A6ACCD;">(e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value)</span><span style="color:#89DDFF;">} </span><span style="color:#C792EA;">placeholder</span><span style="color:#89DDFF;">={</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Username</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">}/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    )</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Field</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="field-props" tabindex="-1">Field Props <a class="header-anchor" href="#field-props" aria-hidden="true">#</a></h3><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>name</code></td><td><code>string</code></td><td>The name of the field in the form.</td></tr><tr><td><code>initialValue</code></td><td><code>T</code></td><td>The initial value of the form field.</td></tr><tr><td><code>listenTo</code></td><td><code>string[]</code></td><td>A list of form field names to listen to. When a listened field updates it&#39;s value, it will trigger the relevant <code>onChangeValidation</code> change detection. Useful when making one field depend on the validation of another.</td></tr><tr><td><code>children</code></td><td><code>(props: FieldInstance&lt;T&gt;) =&gt; JSX.Element</code></td><td>Passed <a href="#interface-fieldinstance"><code>FieldInstance</code></a>, expected to return a JSX element.</td></tr><tr><td><code>onChangeValidate</code></td><td><code>() =&gt; Promise&lt;boolean&gt;</code> or <a href="https://github.com/colinhacks/zod" target="_blank" rel="noreferrer"><code>ZodType</code></a></td><td>The validation logic for when the user has changed the field value. Either a Zod type or Promise. If resolved, no error is passed. If rejected, rejection string is set as an error.</td></tr><tr><td><code>onBlurValidate</code></td><td><code>() =&gt; Promise&lt;boolean&gt;</code> or <a href="https://github.com/colinhacks/zod" target="_blank" rel="noreferrer"><code>ZodType</code></a></td><td>The validation logic for when the user has blurred the field. Either a Zod type or Promise. If resolved, no error is passed. If rejected, rejection string is set as an error.</td></tr><tr><td><code>onSubmitValidate</code></td><td><code>() =&gt; Promise&lt;boolean&gt;</code> or <a href="https://github.com/colinhacks/zod" target="_blank" rel="noreferrer"><code>ZodType</code></a></td><td>The validation logic for when the user has submitted the form. Either a Zod type or Promise. If resolved, no error is passed. If rejected, rejection string is set as an error.</td></tr></tbody></table><h3 id="interface-fieldinstance" tabindex="-1"><em>Interface</em> <code>FieldInstance</code> <a class="header-anchor" href="#interface-fieldinstance" aria-hidden="true">#</a></h3><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>value</code></td><td><code>T</code></td><td><code>T</code> is the type of the Field that&#39;s passed to the <code>&lt;Field&lt;T&gt;&gt;</code> component.</td></tr><tr><td><code>setValue</code></td><td><code>(val: T) =&gt; void</code></td><td>A function useful to change the value of a field</td></tr><tr><td><code>onBlur</code></td><td><code>() =&gt; void</code></td><td>A function expected to be passed to the <code>onBlur</code> element property.</td></tr><tr><td><code>errors</code></td><td><code>string[]</code></td><td>The list of errors currently applied to the field.</td></tr><tr><td><code>setErrors</code></td><td><code>(errors: string[]) =&gt; void</code></td><td>A way to set the errors present on the field.</td></tr><tr><td><code>isValid</code></td><td><code>boolean</code></td><td>A helper property to check if <code>errors</code> is an empty array.</td></tr><tr><td><code>isTouched</code></td><td><code>boolean</code></td><td>A boolean to say if the field has been focused and blurred, regardless of user input.</td></tr><tr><td><code>setIsTouched</code></td><td><code>(val: boolean) =&gt; void</code></td><td></td></tr><tr><td><code>isDirty</code></td><td><code>boolean</code></td><td>A boolean to say if the field has had any kind of user input.</td></tr><tr><td><code>setIsDirty</code></td><td><code>(val: boolean) =&gt; void</code></td><td></td></tr><tr><td><code>props</code></td><td><a href="#field-props"><code>FieldProps</code></a></td><td>The properties originally passed to a field from the component.</td></tr></tbody></table><h2 id="array-field" tabindex="-1">Array Field <a class="header-anchor" href="#array-field" aria-hidden="true">#</a></h2><p>An <code>ArrayField</code> is a wrapper used to handle arrays of form items. An example <code>ArrayField</code> usage is:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">FieldArray</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">={</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">numbers</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">} </span><span style="color:#C792EA;">initialValue</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">add</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">key</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">}&gt;{</span><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">Set value</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  )</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">FieldArray</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="array-field-props" tabindex="-1">Array Field Props <a class="header-anchor" href="#array-field-props" aria-hidden="true">#</a></h3><p>The <code>ArrayField</code> component takes the following props:</p><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>name</code></td><td><code>string</code></td><td>The name of the array field within the form.</td></tr><tr><td><code>initialValue</code></td><td><code>T[]</code></td><td>The initial value of the field array.</td></tr><tr><td><code>listenTo</code></td><td><code>string[]</code></td><td>A list of form field names to listen to. When a listened field updates it&#39;s value, it will trigger the relevant <code>onChangeValidation</code> change detection. Useful when making one field depend on the validation of another.</td></tr><tr><td><code>children</code></td><td><code>(props: FieldArrayInstance&lt;T&gt;) =&gt; JSX.Element</code></td><td>Passed <a href="#interface-fieldarrayinstance"><code>FieldArrayInstance</code></a>, expected to return a JSX element.</td></tr><tr><td><code>onChangeValidate</code></td><td><code>() =&gt; Promise&lt;boolean&gt;</code> or <a href="https://github.com/colinhacks/zod" target="_blank" rel="noreferrer"><code>ZodType</code></a></td><td>The validation logic for when the user has changed the field value. Either a Zod type or Promise. If resolved, no error is passed. If rejected, rejection string is set as an error.</td></tr><tr><td><code>onSubmitValidate</code></td><td><code>() =&gt; Promise&lt;boolean&gt;</code> or <a href="https://github.com/colinhacks/zod" target="_blank" rel="noreferrer"><code>ZodType</code></a></td><td>The validation logic for when the user has submitted the form. Either a Zod type or Promise. If resolved, no error is passed. If rejected, rejection string is set as an error.</td></tr></tbody></table><h3 id="interface-fieldarrayinstance" tabindex="-1"><em>Interface</em> <code>FieldArrayInstance</code> <a class="header-anchor" href="#interface-fieldarrayinstance" aria-hidden="true">#</a></h3><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>value</code></td><td><code>T</code></td><td><code>T</code> is the type of the Field that&#39;s passed to the <code>&lt;Field&lt;T&gt;&gt;</code> component.</td></tr><tr><td><code>setValue</code></td><td><code>(val: T) =&gt; void</code></td><td>A function useful to change the value of a field</td></tr><tr><td><code>errors</code></td><td><code>string[]</code></td><td>The list of errors currently applied to the field.</td></tr><tr><td><code>setErrors</code></td><td><code>(errors: string[]) =&gt; void</code></td><td>A way to set the errors present on the field.</td></tr><tr><td><code>isValid</code></td><td><code>boolean</code></td><td>A helper property to check if <code>errors</code> is an empty array.</td></tr><tr><td><code>isTouched</code></td><td><code>boolean</code></td><td>A boolean to say if the field has been focused and blurred, regardless of user input.</td></tr><tr><td><code>setIsTouched</code></td><td><code>(val: boolean) =&gt; void</code></td><td></td></tr><tr><td><code>isDirty</code></td><td><code>boolean</code></td><td>A boolean to say if the field has had any kind of user input.</td></tr><tr><td><code>setIsDirty</code></td><td><code>(val: boolean) =&gt; void</code></td><td></td></tr><tr><td><code>props</code></td><td><a href="#array-field-props"><code>ArrayFieldProps</code></a></td><td>The properties originally passed to a field from the component.</td></tr><tr><td><code>add</code></td><td><code>(val: T) =&gt; void</code></td><td>A helper utility to add an item to the form array.</td></tr><tr><td><code>remove</code></td><td><code>(index: number) =&gt; void</code></td><td>A helper utility to remove an item via an index from the form array.</td></tr><tr><td><code>insert</code></td><td><code>(index: number, val: T) =&gt; void</code></td><td>A helper utility to insert an item at the index to the form array.</td></tr><tr><td><code>move</code></td><td><code>(from: number, to: number) =&gt; void</code></td><td>A helper utility to move an item from one index to another in the form array.</td></tr><tr><td><code>replace</code></td><td><code>(index: number, val: T) =&gt; void</code></td><td>A helper utility to replace an item at an index on the form array.</td></tr><tr><td><code>swap</code></td><td><code>(indexA: number, indexB: number) =&gt; void</code></td><td>A helper utility to swap two items on the form array.</td></tr></tbody></table><h2 id="array-field-item" tabindex="-1">Array Field Item <a class="header-anchor" href="#array-field-item" aria-hidden="true">#</a></h2><p>An <code>ArrayFieldItem</code> is a helper used to validate sub-items in a <code>FieldArray</code>. An example <code>ArrayFieldItem</code> usage is:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">FieldArray</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">={</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">people</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">} </span><span style="color:#C792EA;">initialValue</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">person</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">FieldArrayItem</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">key</span><span style="color:#89DDFF;">={</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">people[</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">].name</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">} </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">={</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">people[</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">].name</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">{({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">setValue</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">onBlur</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span></span>
<span class="line"><span style="color:#89DDFF;">              </span><span style="color:#C792EA;">value</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">              </span><span style="color:#C792EA;">onBlur</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">onBlur</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">              </span><span style="color:#C792EA;">onChange</span><span style="color:#89DDFF;">={(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setValue</span><span style="color:#A6ACCD;">(e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value)</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">              </span><span style="color:#C792EA;">placeholder</span><span style="color:#89DDFF;">={</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">            /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">          )</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">FieldArrayItem</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      ))</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  )</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">FieldArray</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="array-field-item-props" tabindex="-1">Array Field Item Props <a class="header-anchor" href="#array-field-item-props" aria-hidden="true">#</a></h3><table><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>name</code></td><td><code>string</code></td><td>The name of the field in the form.</td></tr><tr><td><code>listenTo</code></td><td><code>string[]</code></td><td>A list of form field names to listen to. When a listened field updates it&#39;s value, it will trigger the relevant <code>onChangeValidation</code> change detection. Useful when making one field depend on the validation of another.</td></tr><tr><td><code>children</code></td><td><code>(props: FieldInstance&lt;T&gt;) =&gt; JSX.Element</code></td><td>Passed <a href="#interface-fieldinstance"><code>FieldInstance</code></a>, expected to return a JSX element.</td></tr><tr><td><code>onChangeValidate</code></td><td><code>() =&gt; Promise&lt;boolean&gt;</code> or <a href="https://github.com/colinhacks/zod" target="_blank" rel="noreferrer"><code>ZodType</code></a></td><td>The validation logic for when the user has changed the field value. Either a Zod type or Promise. If resolved, no error is passed. If rejected, rejection string is set as an error.</td></tr><tr><td><code>onBlurValidate</code></td><td><code>() =&gt; Promise&lt;boolean&gt;</code> or <a href="https://github.com/colinhacks/zod" target="_blank" rel="noreferrer"><code>ZodType</code></a></td><td>The validation logic for when the user has blurred the field. Either a Zod type or Promise. If resolved, no error is passed. If rejected, rejection string is set as an error.</td></tr><tr><td><code>onSubmitValidate</code></td><td><code>() =&gt; Promise&lt;boolean&gt;</code> or <a href="https://github.com/colinhacks/zod" target="_blank" rel="noreferrer"><code>ZodType</code></a></td><td>The validation logic for when the user has submitted the form. Either a Zod type or Promise. If resolved, no error is passed. If rejected, rejection string is set as an error.</td></tr></tbody></table>`,32),l=[n];function r(d,c,p,i,y,h){return o(),t("div",null,l)}const f=e(a,[["render",r]]);export{F as __pageData,f as default};
