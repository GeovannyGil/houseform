import{_ as s,c as o,o as n,Q as a}from"./chunks/framework.989a1717.js";const m=JSON.parse('{"title":"Set an Error from Form Submit Function","description":"","frontmatter":{},"headers":[],"relativePath":"guides/submission-errors.md","lastUpdated":1679549502000}'),e={name:"guides/submission-errors.md"},t=a(`<h1 id="set-an-error-from-form-submit-function" tabindex="-1">Set an Error from Form Submit Function <a class="header-anchor" href="#set-an-error-from-form-submit-function" aria-label="Permalink to &quot;Set an Error from Form Submit Function&quot;">â€‹</a></h1><p>There are many times where you need to run validation on a submit. While HouseForm supports per-field submission validation using <code>onSubmitValidate</code> property, sometimes there&#39;s just no alternative to running validation in the <code>onSubmit</code> function.</p><p>But, in order to validate a form properly inside of the <code>onSubmit</code> function, you need a way to set errors on fields. The way to do this is by using the <code>getFieldValue</code> method on the <code>onSubmit</code>&#39;s second passed argument, like so:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Form</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">onSubmit</span><span style="color:#89DDFF;">={(</span><span style="color:#A6ACCD;font-style:italic;">values</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">form</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    	</span><span style="color:#A6ACCD;">form</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getFieldValue</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">fieldName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">setErrors</span><span style="color:#F07178;">([</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">This is an error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Form</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>This will cause the respective <code>Field</code> to re-render with the appropriate errors.</p>`,5),l=[t];function r(p,c,i,F,d,u){return n(),o("div",null,l)}const D=s(e,[["render",r]]);export{m as __pageData,D as default};
